type AddUserArgs =
    record {
        principal: Principal;
        byte_limit: nat64;
    };

type AddUserResponse = 
    variant {
        Success;
        UserAlreadyExists;
    };

type UpdateUserArgs =
    record {
        principal: Principal;
        byte_limit: opt nat64;
    };

type UpdateUserResponse = 
    variant {
        Success;
        UserNotFound;
    };

type DeleteUserArgs =
    record {
        principal: Principal;
    };

type DeleteUserResponse = 
    variant {
        Success;
    };

type DeleteAccessorArgs =
    record {
        principal: Principal;
    };

type DeleteAccessorResponse = 
    variant {
        Success;
    };

type AllocatedBucketArgs =
    record {
        blob_hash: Hash;
        blob_size: nat64;
    };

type AllocatedBucketResponse = 
    variant {
        Success;
        AllowanceReached;
    };

service: {
    add_user: (AddUserArgs) -> (AddUserResponse);
    update_user: (UpdateUserArgs) -> (UpdateUserResponse);
    delete_user: (DeleteUserArgs) -> (DeleteUserResponse);
    delete_accessor: (DeleteAccessorArgs) -> (DeleteAccessorResponse);
    allocated_bucket: (AllocatedBucketArgs) -> (AllocatedBucketResponse) query;
}
