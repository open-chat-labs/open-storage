import "../../../libraries/types/can.did";

type AddOrUpdateUsersArgs =
    record {
        users: vec UserConfig;
    };

type UserConfig =
    record {
        user_id: UserId;
        byte_limit: nat64;
    };

type AddOrUpdateUsersResponse =
    variant {
        Success;
    };

type RemoveUserArgs =
    record {
        user_id: UserId;
    };

type RemoveUserResponse = 
    variant {
        Success;
    };

type RemoveAccessorArgs =
    record {
        accessor_id: AccessorId;
    };

type RemoveAccessorResponse = 
    variant {
        Success;
    };

type AllocatedBucketArgs =
    record {
        file_hash: Hash;
        file_size: nat64;
    };

type AllocatedBucketResponse = 
    variant {
        Success: AllocatedBucketSuccessResult;
        AllowanceExceeded: AllocatedBucketAllowanceExceededResult;
        UserNotFound;
        BucketUnavailable;
    };

type AllocatedBucketSuccessResult =
    record {
        canister_id: CanisterId;
        chunk_size: nat32;
        byte_limit: nat64;
        bytes_used: nat64;
        bytes_used_after_upload: nat64;
    };

type AllocatedBucketAllowanceExceededResult =
    record {
        byte_limit: nat64;
        bytes_used: nat64;
        bytes_used_after_upload: nat64;
    };

type UserArgs =
    record {
    };

type UserResponse = 
    variant {
        Success: UserRecord;
        UserNotFound;
    };

type UserRecord = 
    record {
        byte_limit: nat64;
        bytes_used: nat64;
    };

service: {
    add_or_update_users: (AddOrUpdateUsersArgs) -> (AddOrUpdateUsersResponse);
    remove_user: (RemoveUserArgs) -> (RemoveUserResponse);
    remove_accessor: (RemoveAccessorArgs) -> (RemoveAccessorResponse);
    allocated_bucket_v2: (AllocatedBucketArgs) -> (AllocatedBucketResponse) query;
    user: (UserArgs) -> (UserResponse) query;
}
