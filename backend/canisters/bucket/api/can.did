import "../../../libraries/types/can.did";

type UploadChunkArgs =
    record {
        blob_id: BlobId;
        hash: Hash;
        mime_type: text;
        accessors: vec AccessorId;
        chunk_index: nat32;
        chunk_size: nat32;
        total_size: nat64;
        bytes: blob;
    };

type UploadChunkResponse =
    variant {
        Success;
        AllowanceReached;
        BlobAlreadyExists;
        BlobTooBig;
        ChunkAlreadyExists;
        ChunkIndexTooHigh;
        ChunkSizeMismatch;
        Full;
        HashMismatch;
        UserNotFound;
    };

type DeleteBlobArgs =
    record {
        blob_id: BlobId;
    };

type DeleteBlobResponse =
    variant {
        Success;
        NotAuthorized;
        NotFound;
    };

service: {
    upload_chunk: (UploadChunkArgs) -> (UploadChunkResponse);
    delete_blob: (DeleteBlobArgs) -> (DeleteBlobResponse);
}